{"version":3,"sources":["left/SourceBox.js","left/index.js","right/components.js","right/item.js","right/list.js","right/index.js","App.js","index.js"],"names":["source","beginDrag","props","monitor","component","type","name","endDrag","item","getItem","result","getDropResult","didDrop","onEndDrag","id","DragSource","connect","connectDragSource","dragSource","isDragging","children","classes","className","dropEffect","MenuItem","Menu","types","Left","map","index","key","divStyle","border","width","minHeight","padding","color","height","View","Component","render","style","this","Text","Button1","Icon1","fontSize","Button","Icon","parentId","items","childrens","canDrag","dragItem","overItem","move","target","canDrop","drop","draggedId","dragParentId","overParentId","overId","ItemComponent","observer","connectDropTarget","isOver","CurrentComponet","Components","ref","instance","node","findDOMNode","DropTarget","dropTarget","shallow","connectDragPreview","dragPreview","TreeComponent","length","RightComponent","data","moveItem","findItem","dataList","forEach","loop","childs","i","App","constructor","super","handleAddCard","targetId","obj","Math","ceil","random","push","removeNode","removeId","findIndex","child","splice","handleMove","v","makeObservable","observable","action","DndProvider","backend","HTML5Backend","rootElement","document","getElementById","ReactDOM"],"mappings":"6QAGMA,EAAS,CAEXC,UAAS,CAACC,EAAOC,EAASC,KACf,CACHC,KAAMH,EAAMI,OAIpBC,QAAQL,EAAOC,GACX,IAAMK,EAAOL,EAAQM,UACrBC,EAASP,EAAQQ,gBAEnBR,EAAQS,WAAaF,GACxBR,EAAMW,UAAUH,EAAOI,GAAIN,EAAKH,QAyBpBU,2BAAW,OAAQf,GApBlC,SAAiBgB,EAASb,GACtB,MAAO,CACHc,kBAAmBD,EAAQE,aAC3BC,WAAYhB,EAAQgB,gBAiBbJ,EAbf,SAAmBb,GAAQ,IAEfe,EAAkDf,EAAlDe,kBAAmBE,EAA+BjB,EAA/BiB,WAAYC,EAAmBlB,EAAnBkB,SAAUd,EAASJ,EAATI,KAC3Ce,EAAUF,EAAa,SAAW,GAExC,OAAOF,EACC,yBAAKK,UAAWD,EAASf,KAAMA,GACzBc,GAEN,CAAEG,WAAY,YCjClBC,EAAaC,OAAbD,SAEFE,EAAQ,CAAC,OAAQ,OAAQ,SAAU,QAE1B,SAASC,GAAK,UAAEd,IAC3B,OACI,kBAAC,OAAD,KAEQa,EAAME,IAAI,CAACvB,EAAMwB,IAET,kBAAC,EAAD,CAAWvB,KAAMD,EAAMyB,IAAKD,EAAOhB,UAAWA,GAC1C,kBAACW,EAAD,KAAWnB,M,WCZjC0B,EAAW,CAChBC,OAAQ,gBACRC,MAAO,OACPC,UAAW,QACXC,QAAS,OACTC,MAAO,OACPC,OAAQ,QAGT,MAAMC,UAAaC,YAElBC,SACC,OAAO,yBAAKC,MAAOV,EAAUT,UAAWoB,KAAKxC,MAAMoB,WAA5C,0FAAyEoB,KAAKxC,MAAMkB,WAI7F,MAAMuB,UAAaJ,YAClBC,SACC,OAAO,yBAAKlB,UAAWoB,KAAKxC,MAAMoB,WAA3B,+FAIT,MAAMsB,UAAgBL,YACrBC,SACC,OAAO,kBAAC,SAAD,CAAQnC,KAAK,UAAUiB,UAAWoB,KAAKxC,MAAMoB,WAA7C,OAIT,MAAMuB,UAAcN,YACnBC,SACC,OAAO,kBAAC,OAAD,CAAMnC,KAAK,WAAWoC,MAAO,CAAEK,SAAU,OAAQV,MAAO,WAAad,UAAWoB,KAAKxC,MAAMoB,aAIrF,OAAEgB,KAAF,EAAQK,KAAR,EAAcI,OAAQH,EAASI,KAAMH,GC7B9C7C,EAAS,CAKdC,UAAUC,GAAQ,IACT+C,EAAmB/C,EAAnB+C,SAAUzC,EAASN,EAATM,KAElB,MAAO,CACNM,GAF+BN,EAAxBM,GAGPmC,WACA5C,KAJ+BG,EAApBH,KAKX6C,MAL+B1C,EAAd2C,YAanBC,QAAQlD,GACe,IAAlBA,EAAMM,KAAKM,GAShBK,WAAU,CAACjB,EAAOC,IACVD,EAAMM,KAAKM,KAAOX,EAAQM,UAAUK,GAQ5CP,QAAQL,EAAOC,GACd,IAAMO,EAASP,EAAQQ,gBACvB,GAAID,EAAO2C,SAAU,CAAC,IACbA,EAAuB3C,EAAvB2C,SAAUC,EAAa5C,EAAb4C,SAClBpD,EAAMqD,KAAKF,EAAUC,MAaxB,IAAME,EAAS,CAMdC,QAAO,CAACvD,EAAOC,KAKP,EAQRuD,KAAKxD,EAAOC,GAGX,IAFgBA,EAAQS,UAExB,CAHoB,MAO8BT,EAAQM,UAA9CkD,EAPQ,EAOZ7C,GAAyB8C,EAPb,EAOGX,SACLY,EAAiB3D,EAA3B+C,SACIa,EAAW5D,EAAMM,KAArBM,GAER,GAAI6C,EAAW,CACd,GAAIA,IAAcG,GAAUH,IAAcE,GAAgBD,IAAiBE,GAA2B,OAAjBD,EAAuB,OAC5G,MAAO,CACNR,SAAU,CAAEM,YAAWC,gBACvBN,SAAU,CAAEQ,SAAQD,iBAGtB,MAAO,CAAE/C,GAAIgD,MAWf,IAAMC,EAAgBC,YAAS,cAAmBzB,YACjDC,SAAU,IAAD,EACsEE,KAAKxC,MAA3E+D,EADA,EACAA,kBAAmBhD,EADnB,EACmBA,kBAAmBwC,EADtC,EACsCA,QAASS,EAD/C,EAC+CA,OAAQ1D,EADvD,EACuDA,KAAM+C,EAD7D,EAC6DA,KAE7DzC,EAAwBN,EAAxBM,GAAIT,EAAoBG,EAApBH,KAAM8C,EAAc3C,EAAd2C,UACZgB,EAAkBC,EAAW/D,GAE7BgB,EAAWoC,GAAWS,EAAW,cAAgB,GAEvD,OACC,kBAACC,EAAD,CACCrD,GAAIA,EACJT,KAAMA,EACNiB,UAAS,eAAUD,GACnBgD,IAAKC,IAEJ,IAAMC,EAAOC,sBAAYF,GACzBrD,EAAkBsD,GAClBN,EAAkBM,KAEnB,kBAAC,EAAD,CAAMtB,SAAUnC,EAAIoC,MAAOC,EAAWI,KAAMA,QAMjCkB,uBAAW,OAAQjB,GAjClC,SAAuBxC,EAASb,GAC/B,MAAO,CACN8D,kBAAmBjD,EAAQ0D,aAC3BR,OAAQ/D,EAAQ+D,OAAO,CAAES,SAAS,IAClClB,QAAStD,EAAQsD,aA6BJgB,CAA0C1D,qBAAW,OAAQf,GAlF5E,SAAuBgB,EAASb,GAC/B,MAAO,CACNc,kBAAmBD,EAAQE,aAC3B0D,mBAAoB5D,EAAQ6D,cAC5B1D,WAAYhB,EAAQgB,gBA8EmCJ,CAA0CgD,ICvHpFe,EAfOd,YAAS,cAAmBzB,YACjDC,SAAU,IAAD,EAC0BE,KAAKxC,MAA/B+C,EADA,EACAA,SAAUC,EADV,EACUA,MAAOK,EADjB,EACiBA,KACzB,OACC,oCACEL,GAASA,EAAM6B,OACb7B,EAAMtB,IAAIpB,GACH,kBAAC,EAAD,CAAMyC,SAAUA,EAAUnB,IAAKtB,EAAKM,GAAIN,KAAMA,EAAM+C,KAAMA,KAEjE,SCGQyB,EAbQhB,YAAS,cAAoBzB,YAEhDC,SAAU,IAAD,EAEsBE,KAAKxC,MAAxB+E,EAFH,EAEGA,KAAMC,EAFT,EAESA,SACd,OACI,yBAAK5D,UAAU,SACX,kBAAC,EAAD,CAAM2B,SAAU,KAAMC,MAAO+B,EAAM1B,KAAM2B,QCFzD,SAASC,EAASC,EAAUtE,GAC3B,IAAIJ,EAAS,KAoBb,OAnBA0E,EAASC,QAAQ7E,IAChB,IAAM8E,EAAOL,IACZ,GAAIA,EAAKnE,KAAOA,EAEf,OADAJ,EAASuE,EAIV,IAAMM,EAASN,EAAK9B,UAEpB,GAAIoC,EACH,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOR,OAAQS,GAAK,EACvCF,EAAKC,EAAOC,KAKfF,EAAK9E,KAGCE,EAGR,MAAM+E,UAAYlD,YAIdmD,YAAYxF,GACRyF,MAAMzF,GADS,KAFnB+E,KAAO,GAEY,KAsBnBW,cAAgB,CAACC,EAAUxF,KAC7B,IAAMG,EAAO2E,EAASzC,KAAKuC,KAAMY,GAC3BC,EAAM,CACXhF,GAAIiF,KAAKC,KAAqB,IAAhBD,KAAKE,UACnB5F,QAGGG,EAAK2C,UACR3C,EAAK2C,UAAU+C,KAAKJ,GAEpBtF,EAAK2C,UAAY,CAAC2C,IAhCE,KAyCtBK,WAAa,CAACC,EAAUnD,KACvB,IAAMzC,EAAO2E,EAASzC,KAAKuC,KAAMhC,GAC3BpB,EAAQrB,EAAK2C,UAAUkD,UAAUC,GAASA,EAAMxF,KAAOsF,GAC7D5F,EAAK2C,UAAUoD,OAAO1E,EAAO,IA5CR,KAoDnB2E,WAAa,CAACnD,EAAUC,KAAc,IAC1BK,EAA4BN,EAA5BM,UAAWC,EAAiBP,EAAjBO,aACXE,EAAyBR,EAAzBQ,OAAQD,EAAiBP,EAAjBO,aAEVrD,EAAI,eAAQ2E,EAASzC,KAAKuC,KAAMtB,IAChCH,EAAS2B,EAASzC,KAAKuC,KAAMpB,GAE7BhC,EAAQ2B,EAAOL,UAAUkD,UAAUI,GAAKA,EAAE3F,KAAOgD,GAEvDpB,KAAKyD,WAAWxC,EAAWC,GAC3BJ,EAAOL,UAAUoD,OAAO1E,EAAO,EAAGrB,IA5DlCkG,YAAehE,KAAM,CACjBuC,KAAM0B,IACNf,cAAegB,IACfJ,WAAYI,MAGhBlE,KAAKuC,KAAO,CACR,CACInE,GAAI,EACJT,KAAM,OACN8C,UAAW,KAqDvBX,SACI,OACI,yBAAKlB,UAAU,QACX,kBAACuF,EAAA,EAAD,CAAaC,QAASC,KAClB,kBAACpF,EAAD,CAAMd,UAAW6B,KAAKkD,gBACtB,kBAAC,EAAD,CAAOX,KAAMvC,KAAKuC,KAAMC,SAAUxC,KAAK8D,gBAO5Cf,QC1GTuB,G,YAAcC,SAASC,eAAe,SAC5CC,IAAS3E,OAAO,kBAAC,EAAD,MAASwE,K","file":"static/js/main.fa75964c.chunk.js","sourcesContent":["import React from 'react';\nimport { DragSource } from 'react-dnd';\n\nconst source = {\n    // 开始拖拽钱组织数据结构\n    beginDrag(props, monitor, component) {\n        return {\n            type: props.name\n        };\n    },\n\n    endDrag(props, monitor) {\n        const item = monitor.getItem();\n\t\tconst result = monitor.getDropResult();\n        // 确定组件已经放置到右侧区域，有结果返回的时候，调用新增组件的方法\n\t\tif (monitor.didDrop() && result) {\n\t\t\tprops.onEndDrag(result.id, item.type);\n\t\t}\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    };\n}\n\nfunction SourceBox(props) {\n\n    const { connectDragSource, isDragging, children, name } = props;\n    const classes = isDragging ? 'active' : '';\n\n    return connectDragSource(\n            <div className={classes} name={name}>\n                { children }\n            </div>,\n            { dropEffect: 'copy' }\n        );\n}\n\nexport default DragSource('ITEM', source, collect)(SourceBox);\n","import React from 'react';\nimport { Menu } from 'cloud-react';\nimport SourceBox from './SourceBox';\n\nconst { MenuItem } = Menu;\n\nconst types = ['View', 'Text', 'Button', 'Icon'];\n\nexport default function Left({ onEndDrag }) {\n    return (\n        <Menu>\n            {\n                types.map((type, index) => {\n                    return (\n                        <SourceBox name={type} key={index} onEndDrag={onEndDrag}>\n                            <MenuItem>{type}</MenuItem>\n                        </SourceBox>\n                    )\n                })\n            }\n        </Menu>\n    )\n}","import React, { Component } from 'react';\nimport { Button, Icon } from 'cloud-react';\n\nconst divStyle = {\n\tborder: '1px solid red',\n\twidth: '100%',\n\tminHeight: '300px',\n\tpadding: '10px',\n\tcolor: '#666',\n\theight: 'auto'\n};\n\nclass View extends Component {\n\n\trender() {\n\t\treturn <div style={divStyle} className={this.props.className}>这是一个div，你可以拖入其他元素{this.props.children}</div>;\n\t}\n};\n\nclass Text extends Component {\n\trender() {\n\t\treturn <div className={this.props.className}>一段纯文本，不可以拖入其他元素</div>;\n\t}\n}\n\nclass Button1 extends Component {\n\trender() {\n\t\treturn <Button type=\"primary\" className={this.props.className}>OK</Button>\n\t}\n}\n\nclass Icon1 extends Component {\n\trender() {\n\t\treturn <Icon type=\"calendar\" style={{ fontSize: '16px', color: '#09a8e6' }} className={this.props.className} />\n\t}\n}\n\nexport default { View, Text, Button: Button1, Icon: Icon1 }","import React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { observer } from 'mobx-react';\nimport { DragSource, DropTarget } from 'react-dnd';\n\nimport List from './list';\nimport Components from './components';\n\nconst source = {\n\t/**\n\t * 拖拽前为组件增加一些属性\n\t * @param {*} props\n\t */\n\tbeginDrag(props) {\n\t\tconst { parentId, item } = props;\n\t\tconst { id, type, childrens } = item;\n\t\treturn {\n\t\t\tid,\n\t\t\tparentId,\n\t\t\ttype,\n\t\t\titems: childrens\n\t\t};\n\t},\n\n\t/**\n\t * 限制组件是否可拖拽\n\t * @param {*} props\n\t */\n\tcanDrag(props) {\n\t\tif (props.item.id === 1) return false;\n\t\treturn true;\n\t},\n\n\t/**\n\t * 当前组件是否处于拖拽中\n\t * @param {*} props\n\t * @param {*} monitor\n\t */\n\tisDragging(props, monitor) {\n\t\treturn props.item.id === monitor.getItem().id;\n\t},\n\n\t/**\n\t * 我们认为当一个组件停止拖拽时移动中的位置都是在查找合适的的位置，只有在停止的时候才是它真正想要放置的位置\n\t * @param {*} props\n\t * @param {*} monitor\n\t */\n\tendDrag(props, monitor) {\n\t\tconst result = monitor.getDropResult();\n\t\tif (result.dragItem) {\n\t\t\tconst { dragItem, overItem } = result;\n\t\t\tprops.move(dragItem, overItem);\n\t\t}\n\t}\n};\n\nfunction sourceCollect(connect, monitor) {\n\treturn {\n\t\tconnectDragSource: connect.dragSource(),\n\t\tconnectDragPreview: connect.dragPreview(),\n\t\tisDragging: monitor.isDragging()\n\t};\n}\n\nconst target = {\n\t/**\n\t * 是否可以将拖拽的元素放置\n\t * @param {*} props\n\t * @param {*} monitor\n\t */\n\tcanDrop(props, monitor) {\n\t\t// 在此处可以获取到拖拽的组件类型，从而增加一些是否可以放置的条件\n\t\t// const dragType = monitor.getItem().type;\n\t\t// // 放置的组件类型\n\t\t// const dropType = props.item.type;\n\t\treturn true;\n\t},\n\n\t/**\n\t * 使用drop而未使用hover是不想一直更改数据结构\n\t * @param {*} props\n\t * @param {*} monitor\n\t */\n\tdrop(props, monitor) {\n\t\tconst didDrop = monitor.didDrop();\n\n\t\tif (didDrop) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst { id: draggedId, parentId: dragParentId } = monitor.getItem();\n\t\tconst { parentId: overParentId } = props;\n\t\tconst { id: overId } = props.item;\n\n\t\tif (draggedId) {\n\t\t\tif (draggedId === overId || draggedId === overParentId || dragParentId === overId || overParentId === null) return undefined;\n\t\t\treturn {\n\t\t\t\tdragItem: { draggedId, dragParentId },\n\t\t\t\toverItem: { overId, overParentId }\n\t\t\t};\n\t\t}\n\t\treturn { id: overId };\n\t}\n};\n\nfunction targetCollect(connect, monitor) {\n\treturn {\n\t\tconnectDropTarget: connect.dropTarget(),\n\t\tisOver: monitor.isOver({ shallow: true }),\n\t\tcanDrop: monitor.canDrop()\n\t};\n}\nconst ItemComponent = observer(class Item extends Component {\n\trender() {\n\t\tconst { connectDropTarget, connectDragSource, canDrop, isOver, item, move } = this.props;\n\n\t\tconst { id, type, childrens } = item;\n\t\tconst CurrentComponet = Components[type];\n\n\t\tconst classes = (canDrop && isOver) ?  'activeHover' : '';\n\n\t\treturn (\n\t\t\t<CurrentComponet\n\t\t\t\tid={id}\n\t\t\t\ttype={type}\n\t\t\t\tclassName={`item ${classes}`}\n\t\t\t\tref={instance => {\n\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\tconst node = findDOMNode(instance);\n\t\t\t\t\tconnectDragSource(node);\n\t\t\t\t\tconnectDropTarget(node);\n\t\t\t\t}}>\n\t\t\t\t<List parentId={id} items={childrens} move={move} />\n\t\t\t</CurrentComponet>\n\t\t);\n\t}\n});\n\nexport default DropTarget('ITEM', target, targetCollect)(DragSource('ITEM', source, sourceCollect)(ItemComponent));\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport Item from './item';\n\nconst TreeComponent = observer(class Tree extends Component {\n\trender() {\n\t\tconst { parentId, items, move } = this.props;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{items && items.length\n\t\t\t\t\t? items.map(item => {\n\t\t\t\t\t\t\treturn <Item parentId={parentId} key={item.id} item={item} move={move} />;\n\t\t\t\t\t  })\n\t\t\t\t\t: null}\n\t\t\t</>\n\t\t);\n\t}\n});\n\nexport default TreeComponent;\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport List from './list';\nconst RightComponent = observer(class Right extends Component {\n\n    render() {\n\n        const { data, moveItem } = this.props;\n        return (\n            <div className=\"right\" >\n                <List parentId={null} items={data} move={moveItem} />\n            </div>\n        )\n    }\n});\n\nexport default RightComponent;\n","import React, { Component } from \"react\";\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { observable, makeObservable, action } from 'mobx';\nimport Left from './left';\nimport Right from './right';\n\n// 递归查找当前 id 的数据\nfunction findItem(dataList, id) {\n\tlet result = null;\n\tdataList.forEach(item => {\n\t\tconst loop = data => {\n\t\t\tif (data.id === id) {\n\t\t\t\tresult = data;\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tconst childs = data.childrens;\n\n\t\t\tif (childs) {\n\t\t\t\tfor (let i = 0; i < childs.length; i += 1) {\n\t\t\t\t\tloop(childs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tloop(item);\n\t});\n\n\treturn result;\n}\n\nclass App extends Component {\n\n    data = [];\n\n    constructor(props) {\n        super(props);\n        makeObservable(this, {\n            data: observable,\n            handleAddCard: action,\n            handleMove: action\n        });\n\n        this.data = [\n            {\n                id: 1,\n                type: 'View',\n                childrens: []\n            }\n        ];\n    }\n\n    /**\n     * 拖拽增加新组件\n     * @param {*} targetId 目标组件id\n     * @param {*} type 新增的节点类型\n     */\n    handleAddCard = (targetId, type) => {\n\t\tconst item = findItem(this.data, targetId);\n\t\tconst obj = {\n\t\t\tid: Math.ceil(Math.random() * 10000),\n\t\t\ttype\n\t\t};\n\n\t\tif (item.childrens) {\n\t\t\titem.childrens.push(obj);\n\t\t} else {\n\t\t\titem.childrens = [obj];\n        }\n    };\n\n    /**\n\t * 删除节点\n\t * @param {*} removeId 被删除组件 id\n\t * @param {*} parentId 被删除节点的父组件 id\n\t */\n\tremoveNode = (removeId, parentId) => {\n\t\tconst item = findItem(this.data, parentId);\n\t\tconst index = item.childrens.findIndex(child => child.id === removeId);\n\t\titem.childrens.splice(index, 1);\n\t}\n\n    /**\n     * 移动组件\n     * @param {*} dragItem 被拖动的组件信息\n     * @param {*} overItem hover上去的组件信息\n     */\n    handleMove = (dragItem, overItem) => {\n        const { draggedId, dragParentId } = dragItem;\n        const { overId, overParentId } = overItem;\n\n        const item = { ...findItem(this.data, draggedId) };\n        const target = findItem(this.data, overParentId);\n\n        const index = target.childrens.findIndex(v => v.id === overId);\n\n        this.removeNode(draggedId, dragParentId);\n        target.childrens.splice(index, 0, item);\n    };\n\n    render() {\n        return (\n            <div className=\"main\">\n                <DndProvider backend={HTML5Backend}>\n                    <Left onEndDrag={this.handleAddCard}/>\n                    <Right data={this.data} moveItem={this.handleMove} />\n                </DndProvider>\n            </div>\n        );\n    }\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'cloud-react/cloud-react.css';\nimport './style.css';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}